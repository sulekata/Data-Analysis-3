"0","#### CLEANING
# import raw data ---------------------------------------------------------

gz <- gzfile('C:/CEU/Winter_Term/Data_Analysis_3/Assignment_1/data/raw/listings.csv.gz','rt')  
listings <- read.csv( gz, header = T )

# cleaning -----------------------------------------------------

### filter variables which cannot be used for prediction in this task
df <- listings %>% select( -c( listing_url, scrape_id, description, neighborhood_overview, picture_url, host_url, host_name, host_location, host_about, host_thumbnail_url, host_picture_url, host_neighbourhood, host_listings_count, neighbourhood_group_cleansed, bathrooms, minimum_nights, minimum_minimum_nights, minimum_maximum_nights, minimum_nights_avg_ntm, maximum_nights, maximum_minimum_nights, maximum_maximum_nights, maximum_nights_avg_ntm, calendar_updated, has_availability, availability_30, availability_60, availability_90, availability_365, calendar_last_scraped, number_of_reviews_ltm, number_of_reviews_l30d, license ) )

### fix variable types
sapply( df, class )
"
"1","                                          id "
"1","
"
"1","                                   ""integer"" "
"1","
"
"1","                                last_scraped "
"1","
"
"1","                                 ""character"" "
"1","
"
"1","                                        name "
"1","
"
"1","                                 ""character"" "
"1","
"
"1","                                     host_id "
"1","
"
"1","                                   ""integer"" "
"1","
"
"1","                                  host_since "
"1","
"
"1","                                 ""character"" "
"1","
"
"1","                          host_response_time "
"1","
"
"1","                                 ""character"" "
"1","
"
"1","                          host_response_rate "
"1","
"
"1","                                 ""character"" "
"1","
"
"1","                        host_acceptance_rate "
"1","
"
"1","                                 ""character"" "
"1","
"
"1","                           host_is_superhost "
"1","
"
"1","                                 ""character"" "
"1","
"
"1","                   host_total_listings_count "
"1","
"
"1","                                   ""integer"" "
"1","
"
"1","                          host_verifications "
"1","
"
"1","                                 ""character"" "
"1","
"
"1","                        host_has_profile_pic "
"1","
"
"1","                                 ""character"" "
"1","
"
"1","                      host_identity_verified "
"1","
"
"1","                                 ""character"" "
"1","
"
"1","                               neighbourhood "
"1","
"
"1","                                 ""character"" "
"1","
"
"1","                      neighbourhood_cleansed "
"1","
"
"1","                                 ""character"" "
"1","
"
"1","                                    latitude "
"1","
"
"1","                                   ""numeric"" "
"1","
"
"1","                                   longitude "
"1","
"
"1","                                   ""numeric"" "
"1","
"
"1","                               property_type "
"1","
"
"1","                                 ""character"" "
"1","
"
"1","                                   room_type "
"1","
"
"1","                                 ""character"" "
"1","
"
"1","                                accommodates "
"1","
"
"1","                                   ""integer"" "
"1","
"
"1","                              bathrooms_text "
"1","
"
"1","                                 ""character"" "
"1","
"
"1","                                    bedrooms "
"1","
"
"1","                                   ""integer"" "
"1","
"
"1","                                        beds "
"1","
"
"1","                                   ""integer"" "
"1","
"
"1","                                   amenities "
"1","
"
"1","                                 ""character"" "
"1","
"
"1","                                       price "
"1","
"
"1","                                 ""character"" "
"1","
"
"1","                           number_of_reviews "
"1","
"
"1","                                   ""integer"" "
"1","
"
"1","                                first_review "
"1","
"
"1","                                 ""character"" "
"1","
"
"1","                                 last_review "
"1","
"
"1","                                 ""character"" "
"1","
"
"1","                        review_scores_rating "
"1","
"
"1","                                   ""integer"" "
"1","
"
"1","                      review_scores_accuracy "
"1","
"
"1","                                   ""integer"" "
"1","
"
"1","                   review_scores_cleanliness "
"1","
"
"1","                                   ""integer"" "
"1","
"
"1","                       review_scores_checkin "
"1","
"
"1","                                   ""integer"" "
"1","
"
"1","                 review_scores_communication "
"1","
"
"1","                                   ""integer"" "
"1","
"
"1","                      review_scores_location "
"1","
"
"1","                                   ""integer"" "
"1","
"
"1","                         review_scores_value "
"1","
"
"1","                                   ""integer"" "
"1","
"
"1","                            instant_bookable "
"1","
"
"1","                                 ""character"" "
"1","
"
"1","              calculated_host_listings_count "
"1","
"
"1","                                   ""integer"" "
"1","
"
"1"," calculated_host_listings_count_entire_homes "
"1","
"
"1","                                   ""integer"" "
"1","
"
"1","calculated_host_listings_count_private_rooms "
"1","
"
"1","                                   ""integer"" "
"1","
"
"1"," calculated_host_listings_count_shared_rooms "
"1","
"
"1","                                   ""integer"" "
"1","
"
"1","                           reviews_per_month "
"1","
"
"1","                                   ""numeric"" "
"1","
"
"0","### convert price variable to numeric"
"0","# remove $ sign"
"0","df$price <- lapply("
"0","  df$price, "
"0","  function(x) substring( x, 2 )"
"0",")"
"0",""
"0","# remove commas"
"0","df$price <- as.numeric( gsub("","","""",df$price) )"
"0",""
"0","### convert bathrooms_text variable to numeric"
"0","# remove 'bath'or 'baths' from string"
"0","df$bathrooms <- unlist( lapply("
"0","  df$bathrooms_text,"
"0","  function(x) as.numeric( strsplit( x, "" "")[[1]][1] )"
"0",") )"
"0",""
"0","# replace 'NA' string with NA"
"0","df$bathrooms <- ifelse( df$bathrooms == 'NA', NA, as.numeric( df$bathrooms ) )"
"0",""
"0","# drop bathrooms_text variable"
"0","df <- df %>% select( -bathrooms_text )"
"0",""
"0","### convert host_response_rate variable to numeric"
"0","# replace 'N/A' string with NA"
"0","df$host_response_rate <- ifelse( df$host_response_rate == 'N/A', NA, df$host_response_rate )"
"0",""
"0","# remove % sign and convert to numeric"
"0","df$host_response_rate <- as.numeric( gsub( ""%"","""",df$host_response_rate ) )"
"0",""
"0","### convert host_acceptance_rate variable to numeric"
"0","df$host_acceptance_rate <- ifelse( df$host_acceptance_rate == 'N/A', NA, df$host_acceptance_rate )"
"0",""
"0","# remove % sign and convert to numeric"
"0","df$host_acceptance_rate <- as.numeric( gsub( ""%"","""",df$host_acceptance_rate ) )"
"0",""
"0","### convert date columns to date"
"0","df$first_review <- as.Date( df$first_review, format=""%Y-%m-%d"" )"
"0",""
"0","df$last_review <- as.Date( df$last_review, format=""%Y-%m-%d"" )"
"0",""
"0","df$last_scraped <- as.Date( df$last_scraped, format=""%Y-%m-%d"" )"
"0",""
"0","df$host_since <- as.Date( df$host_since, format=""%Y-%m-%d"" )"
"0",""
"0","### extract amenities"
"0","# remove unnecessary signs and convert to list"
"0","df$amenities <- tolower( df$amenities )"
"0","df$amenities <- gsub(""\\["","""", df$amenities)"
"0","df$amenities <- gsub(""\\]"","""", df$amenities)"
"0","df$amenities <- gsub('\\""',"""",df$amenities)"
"0","df$amenities <- as.list(strsplit(df$amenities, "",""))"
"0",""
"0","# define levels and dummies and append to df"
"0","levs <- levels(factor(unlist(df$amenities)))"
"0","df <- cbind(df,as.data.frame(do.call(rbind, lapply(lapply(df$amenities, factor, levs), table))))"
"0",""
"0","# function to aggregate several columns of same type/category into one generic binary column"
"0","aggregate_columns <- function(word){"
"0","  "
"0","  # subset columns which contain a specific word and save them to another dataframe, also select 'id' to use for merge later"
"0","  new_df <- df %>% select(contains(word),""id"")"
"0","  "
"0","  # go row by row to see if any of the rows have a 1, if it does, populate new column 'col_name' with 1"
"0","  new_df$col_name <- apply(new_df[0:ncol(new_df)], 1, function(x) ifelse(any(x == 1), '1', '0'))"
"0","  "
"0","  # save new column and id column to another dataframe, this new dataframe is used to merge with original dataframe"
"0","  new_df_merge <- new_df %>% select(id,col_name)"
"0","  "
"0","  # merge original dataframe and new_df_merge by 'id'"
"0","  df <- merge(df,new_df_merge,by = ""id"", all = FALSE)"
"0","  "
"0","  # remove the new column and 'id' column from the new_df dataframe"
"0","  new_df <- new_df %>% select(-c(id,col_name))"
"0",""
"0","  # remove the selected columns from original dataframe since they have already been aggregated into a new column and merged"
"0","  df <<- df %>% select(-colnames(new_df))"
"0","}"
"0",""
"0","# aggregate columns for a few amenities that could be important for predicting price"
"0","aggregate_columns(""wifi"")"
"0","df <- df %>% rename(""wifi"" = col_name)"
"0",""
"0","aggregate_columns(""tv"")"
"0","df <- df %>% rename(""tv"" = col_name)"
"0",""
"0","aggregate_columns(""refrigerator"")"
"0","df <- df %>% rename(""refrigerator"" = col_name)"
"0",""
"0","aggregate_columns(""air conditioning"")"
"0","df <- df %>% rename(""air_conditioning"" = col_name)"
"0",""
"0","aggregate_columns(""sound"")"
"0","df <- df %>% rename(""sound"" = col_name)"
"0",""
"0","aggregate_columns(""baby"")"
"0","df <- df %>% rename(""baby"" = col_name)"
"0",""
"0","aggregate_columns(""beach"")"
"0","df <- df %>% rename(""beach"" = col_name)"
"0",""
"0","aggregate_columns(""stove"")"
"0","df <- df %>% rename(""stove"" = col_name)"
"0",""
"0","aggregate_columns(""free parking"")"
"0","df <- df %>% rename(""free_parking"" = col_name)"
"0",""
"0","aggregate_columns(""paid parking"")"
"0","df <- df %>% rename(""paid_parking"" = col_name)"
"0",""
"0","# drop the amenities column because a csv cannot store it since it is a list"
"0","df <- df %>% select( -amenities )"
"0",""
"0","# drop amenities that were not used"
"0","df <- df[ -c( 41:497 )]"
"0",""
"0","# filter the data frame for apartments that can accommodate 2-6 guests --------"
"0",""
"0","# check room_type variable"
"0","table(df$room_type)"
"1","
"
"1","Entire home/apt "
"1","     Hotel room "
"1","   Private room "
"1","    Shared room "
"1","
"
"1","          14349 "
"1","            328 "
"1","           4463 "
"1","            137 "
"1","
"
"0","# keep if room_type is entire home/apartment"
"0","df <- df %>% filter( room_type == 'Entire home/apt')"
"0",""
"0","# drop room_type variable"
"0","df <- df %>% select( -room_type )"
"0",""
"0","# check property_type variable"
"0","table(df$property_type)"
"1","
"
"1","                     Barn "
"1","                     Boat "
"1","                      Bus "
"1","
"
"1","                        1 "
"1","                        2 "
"1","                        1 "
"1","
"
"1","                Camper/RV "
"1","          Casa particular "
"1","                   Castle "
"1","
"
"1","                        6 "
"1","                        1 "
"1","                        1 "
"1","
"
"1","              Earth house "
"1","         Entire apartment "
"1"," Entire bed and breakfast "
"1","
"
"1","                        4 "
"1","                     6708 "
"1","                        4 "
"1","
"
"1","          Entire bungalow "
"1","             Entire cabin "
"1","            Entire chalet "
"1","
"
"1","                       91 "
"1","                       19 "
"1","                       38 "
"1","
"
"1","       Entire condominium "
"1","           Entire cottage "
"1","             Entire floor "
"1","
"
"1","                      428 "
"1","                      352 "
"1","                        2 "
"1","
"
"1","       Entire guest suite "
"1","        Entire guesthouse "
"1","          Entire home/apt "
"1","
"
"1","                      983 "
"1","                      393 "
"1","                        1 "
"1","
"
"1","            Entire hostel "
"1","             Entire house "
"1","              Entire loft "
"1","
"
"1","                        1 "
"1","                     3573 "
"1","                      215 "
"1","
"
"1","             Entire place "
"1","            Entire resort "
"1","Entire serviced apartment "
"1","
"
"1","                       34 "
"1","                        1 "
"1","                      299 "
"1","
"
"1","         Entire townhouse "
"1","     Entire vacation home "
"1","             Entire villa "
"1","
"
"1","                      287 "
"1","                        1 "
"1","                      837 "
"1","
"
"1","                Farm stay "
"1","                   Island "
"1","       Room in aparthotel "
"1","
"
"1","                       26 "
"1","                        1 "
"1","                        5 "
"1","
"
"1","   Room in boutique hotel "
"1","                     Tent "
"1","               Tiny house "
"1","
"
"1","                        4 "
"1","                        1 "
"1","                       28 "
"1","
"
"1","                     Yurt "
"1","
"
"1","                        1 "
"1","
"
"0","# keep if property_type suggests that the place is an apartment"
"0","df <- df %>% "
"0","  filter( property_type %in% c('Entire apartment', 'Entire loft', 'Entire serviced apartment' ) )"
"0",""
"0","# keep apartments which can host 2-6 guests"
"0","df <- df %>%"
"0","  filter( accommodates %in% c(2:6) )"
"0",""
"0",""
"0","# create factors ----------------------------------------------------------"
"0",""
"0","# rename property_type categories to make them shorter"
"0","df <- df %>% mutate( property_type = ifelse( property_type == 'Entire apartment', 'apartment',"
"0","                                             ifelse( property_type == 'Entire loft', 'loft',"
"0","                                                     ifelse( property_type == 'Entire serviced apartment', 'serviced_apartment', "".""))))"
"0","# convert property_type to factor"
"0","df <- df %>%"
"0","  mutate(f_property_type = factor(property_type))"
"0",""
"0","# convert neighbourhood_cleansed to factor"
"0","df <- df %>% "
"0","  mutate( f_neighbourhood = factor(neighbourhood_cleansed))"
"0",""
"0","# create numerical variables ----------------------------------------------"
"0",""
"0","# create days since first review"
"0","df <- df %>% mutate("
"0","              n_days_since_rv = as.numeric(last_scraped - first_review) )"
"0",""
"0","# create days since host registered"
"0","df <- df %>% mutate("
"0","  n_days_since_host = as.numeric(last_scraped - host_since) )"
"0",""
"0","# add new numeric columns from certain columns"
"0","numericals <- c(""host_response_rate"", ""host_acceptance_rate"", ""host_total_listings_count"", ""accommodates"", ""bedrooms"", ""beds"", ""number_of_reviews"", ""review_scores_rating"", ""calculated_host_listings_count"", ""reviews_per_month"", ""bathrooms"")                                 "
"0","                               "
"0","df <- df %>%"
"0","  mutate_at(vars(numericals), funs(""n""=as.numeric))"
"0",""
"0","# rename columns so they start with n_ as opposed to end with _n"
"0","nnames <- df %>%"
"0","  select(ends_with(""_n"")) %>%"
"0","  names()"
"0","nnames_i <- match(nnames, colnames(df))"
"0","colnames(df)[nnames_i] <- paste0(""n_"", numericals)"
"0",""
"0","# create dummies ----------------------------------------------------------"
"0",""
"0","# create dummies"
"0","df <- df %>% mutate("
"0","  d_superhost = ifelse( host_is_superhost == 't', 1, 0),"
"0","  d_profile_pic = ifelse( host_has_profile_pic == 't', 1, 0),"
"0","  d_identity_verified = ifelse( host_identity_verified == 't', 1, 0),"
"0","  d_instant_bookable = ifelse( instant_bookable == 't', 1, 0)"
"0",")"
"0",""
"0","# rename amenities dummies"
"0","dummies <- c( ""wifi"", ""tv"", ""refrigerator"", ""air_conditioning"", ""sound"", ""baby"", ""beach"", ""stove"", ""free_parking"", ""paid_parking"" )"
"0","df <- df %>%"
"0","  mutate_at(vars(dummies), funs(""d""= (.)))"
"0","# rename columns"
"0","dnames <- df %>%"
"0","  select(ends_with(""_d"")) %>%"
"0","  names()"
"0","dnames_i <- match(dnames, colnames(df))"
"0","colnames(df)[dnames_i] <- paste0(""d_"", tolower(gsub(""[^[:alnum:]_]"", """",dummies)))"
"0",""
"0",""
"0","# filter needed variables -------------------------------------------------"
"0",""
"0","# keep columns if they start with d_, n_, f_ and some others"
"0","df <- df %>%"
"0","  select(matches(""^d_.*|^n_.*|^f_.*|^p_.*|^usd_.*""), price, id,"
"0","         neighbourhood_cleansed, property_type)"
"0",""
"0","# check if price is missing"
"0","nrow(df %>% filter( is.na(price)))"
"1","[1]"
"1"," 0"
"1","
"
